{"version":3,"sources":["App.js","index.js","binance/web3.js","binance/verify.js"],"names":["App","useState","selectedFile","setSelectedFile","id","setId","message","result","setResult","loading","setLoading","showList","a","axios","get","data","useEffect","onSubmit","e","preventDefault","length","toast","info","FormData","Object","keys","key","append","post","response","success","web3","eth","getAccounts","accounts","defaultAccount","ethEnabled","window","ethereum","send","hash32","i","bs58","decode","ipfs","path","slice","toString","obj","fileName","fileId","verify","methods","addPdfLink","parseInt","gas","from","on","hash","transaction","console","log","error","sendViaCall","value","paymentTransaction","paymentDone","onClickDownload","productId","pdfId","getPdfLink","call","bytes32Hex","hashHex","hashBytes","Buffer","encode","config","headers","_id","document","createElement","href","download","click","onClickPay","encType","Group","controlId","className","Control","type","name","onChange","target","files","multiple","variant","animation","role","striped","bordered","hover","responsive","map","product","index","rel","onClick","xmlns","width","height","fill","viewBox","d","ReactDOM","render","StrictMode","getElementById","Web3","currentProvider","provider","providers","HttpProvider","Contract","JSON","parse","verifyJson","interface"],"mappings":"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","file":"static/js/main.598e549b.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport { Button, Container, Form, Spinner, Table } from \"react-bootstrap\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport verify from \"./binance/verify\";\nimport web3 from \"./binance/web3\";\nimport bs58 from \"bs58\";\n\nfunction App() {\n  const [selectedFile, setSelectedFile] = useState([]);\n  const [id, setId] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [result, setResult] = useState([]);\n  const [loading, setLoading] = useState(\"false\");\n\n  const showList = async () => {\n    setLoading(true);\n    const { data } = await axios.get(\"/showlist\");\n    if (data) {\n      setResult(data);\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    showList();\n  }, []);\n\n  const onSubmit = async (e) => {\n    setLoading(true);\n    e.preventDefault();\n    if (selectedFile.length > 0) {\n      toast.info(\"Uploading to ipfs\");\n      const data = new FormData();\n      for (const key of Object.keys(selectedFile)) {\n        data.append(\"files\", selectedFile[key]);\n      }\n      const response = await axios.post(\"/upload\", data);\n\n      toast.success(\"ipfs upload completed now uploading to blockchain\");\n      let accounts = await web3.eth.getAccounts();\n      let defaultAccount = accounts[0];\n      //------------------------------------\n      if (!defaultAccount) {\n        const ethEnabled = async () => {\n          if (window.ethereum) {\n            await window.ethereum.send(\"eth_requestAccounts\");\n            try {\n              window.web3(window.ethereum);\n            } catch (error) {\n              return true;\n            }\n            return true;\n          }\n          return false;\n        };\n        await ethEnabled();\n        accounts = await web3.eth.getAccounts();\n        defaultAccount = accounts[0];\n      }\n      //------------------------------------\n      //------------------converting hash to 32bit-----------------------\n\n      // Return bytes32 hex string from base58 encoded ipfs hash,\n      // stripping leading 2 bytes from 34 byte IPFS hash\n      // Assume IPFS defaults: function:0x12=sha2, size:0x20=256 bits\n      // E.g. \"QmNSUYVKDSvPUnRLKmuxk9diJ6yS96r1TrAXzjTiBcCLAL\" -->\n      // \"0x017dfd85d4f6cb4dcd715a88101f7b1f06cd1e009b2327a0809d01eb9c91f231\"\n      let hash32 = [];\n      for (let i = 0; i < response.data.length; i++) {\n        hash32[i] =\n          \"0x\" +\n          bs58.decode(response.data[i].ipfs.path).slice(2).toString(\"hex\");\n      }\n\n      // Return base58 encoded ipfs hash from bytes32 hex string,\n      // E.g. \"0x017dfd85d4f6cb4dcd715a88101f7b1f06cd1e009b2327a0809d01eb9c91f231\"\n      // --> \"QmNSUYVKDSvPUnRLKmuxk9diJ6yS96r1TrAXzjTiBcCLAL\"\n\n      //--------------------------------------------------------\n      let obj = {};\n      for (let i = 0; i < hash32.length; i++) {\n        obj.ipfs = hash32[i];\n        obj.fileName = response.data[i].fileName;\n        obj.fileId = response.data[i].fileId;\n        let result;\n        try {\n          result = await verify.methods\n            .addPdfLink(parseInt(obj.fileId), hash32[i])\n            .send({ gas: 500000, from: defaultAccount })\n            .on(\"transactionHash\", function (hash) {\n              obj.transaction = hash;\n            });\n        } catch (error) {\n          console.log({ error });\n        }\n\n        if (result) {\n          showList();\n          toast.success(`file ${i + 1} uploaded completed`);\n          try {\n            var amount_to_send_wei = 0.0001 * 1000000000000000000;\n            const result = await verify.methods\n              .sendViaCall(\"0xd6ee6a31b5dafe9a38d71b20c7e6d638f4eba67c\")\n              .send({\n                from: defaultAccount,\n                value: amount_to_send_wei,\n                gas: 500000,\n              })\n              .on(\"transactionHash\", function (hash) {\n                obj.paymentTransaction = hash;\n              });\n            if (result) {\n              obj.paymentDone = true;\n              const res = await axios.post(\"/save\", obj);\n              if (res) {\n                toast.success(\"Your payment completed! you can download now\");\n              }\n            }\n          } catch (error) {\n            obj.paymentDone = false;\n            const res = await axios.post(\"/save\", obj);\n            if (res) {\n              toast.error(\n                \"User declined the payment, You can't download the file\"\n              );\n            } else {\n              toast.error(\"Something went wrong\");\n            }\n          }\n        } else {\n          toast.error(\"something wrong!!\");\n        }\n      }\n      showList();\n      setLoading(false);\n    } else {\n      toast.error(\"Please select at least 1 file\");\n    }\n    setSelectedFile([]);\n    setLoading(false);\n  };\n\n  const onClickDownload = async (productId) => {\n    setLoading(true);\n    if (productId) {\n      setId(productId);\n    }\n    if (id || productId) {\n      const pdfId = id ? id : productId;\n      try {\n        const { data } = await axios.post(\"/getone\", { id: pdfId });\n        if (data) {\n          const bytes32Hex = await verify.methods\n            .getPdfLink(parseInt(data.fileId))\n            .call();\n          //-----------------------------------------------------\n\n          // Add our default ipfs values for first 2 bytes:\n          // function:0x12=sha2, size:0x20=256 bits\n          // and cut off leading \"0x\"\n          const hashHex = \"1220\" + bytes32Hex.slice(2);\n          const hashBytes = Buffer.from(hashHex, \"hex\");\n          const hash = bs58.encode(hashBytes);\n\n          //----------------------------------------------\n          const config = {\n            headers: {\n              \"Content-type\": \"application/json\",\n            },\n          };\n          const pdfId = data._id;\n\n          const path = await axios.post(\n            \"/download\",\n            { hash, pdfId },\n            { config }\n          );\n          if (path.data) {\n            setLoading(false);\n            var a = document.createElement(\"a\");\n            a.href = `/download/${pdfId}.pdf`;\n            a.download = \"download\";\n\n            a.click();\n          } else {\n            setLoading(false);\n            return \"\";\n          }\n        }\n      } catch (error) {\n        toast.error(\"You have to pay first\");\n        setLoading(false);\n      }\n    }\n    setId(\"\");\n    setLoading(false);\n  };\n  const onClickPay = async (id) => {\n    setLoading(true);\n    let obj = {};\n    obj.id = id;\n    let accounts = await web3.eth.getAccounts();\n    let defaultAccount = accounts[0];\n    //------------------------------------\n    if (!defaultAccount) {\n      const ethEnabled = async () => {\n        if (window.ethereum) {\n          await window.ethereum.send(\"eth_requestAccounts\");\n          try {\n            window.web3(window.ethereum);\n          } catch (error) {\n            return true;\n          }\n          return true;\n        }\n        return false;\n      };\n      await ethEnabled();\n      accounts = await web3.eth.getAccounts();\n      defaultAccount = accounts[0];\n    }\n    try {\n      var amount_to_send_wei = 0.0001 * 1000000000000000000;\n\n      const result = await verify.methods\n        .sendViaCall(\"0xd6ee6a31b5dafe9a38d71b20c7e6d638f4eba67c\")\n        .send({\n          from: defaultAccount,\n          value: amount_to_send_wei,\n          gas: 500000,\n        })\n        .on(\"transactionHash\", function (hash) {\n          obj.paymentTransaction = hash;\n        });\n      if (result) {\n        obj.paymentDone = true;\n        const res = await axios.post(\"/pay\", obj);\n        if (res) {\n          toast.success(\"Your payment completed! you can download now\");\n        }\n      }\n    } catch (error) {\n      obj.paymentDone = false;\n      const res = await axios.post(\"/pay\", obj);\n      if (res) {\n        toast.error(\"User declined the payment, You can't download the file\");\n      } else {\n        toast.error(\"Something went wrong\");\n      }\n    }\n\n    showList();\n    setLoading(false);\n  };\n\n  return (\n    <Container>\n      <h1>Upload files to ipfs</h1>\n\n      <Form onSubmit={onSubmit} encType=\"multipart/form-data\">\n        <Form.Group controlId=\"formFile\" className=\"mb-3\">\n          <Form.Control\n            type=\"file\"\n            name=\"file\"\n            value={selectedFile}\n            onChange={(e) => setSelectedFile(e.target.files)}\n            multiple\n          />\n          <Button variant=\"primary\" type=\"submit\">\n            Submit\n          </Button>\n        </Form.Group>\n      </Form>\n      {message ?? message}\n      <hr />\n      <h1>Uploaded File List</h1>\n      {/* <Form\n        onSubmit={async (e) => {\n          e.preventDefault();\n          onClickDownload();\n        }}\n      >\n        <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlInput1\">\n          <Form.Label>Enter Id</Form.Label>\n          <Form.Control\n            type=\"text\"\n            onChange={(e) => setId(e.target.value)}\n            value={id}\n          />\n        </Form.Group>\n        <Button variant=\"primary\" type=\"submit\">\n          Download\n        </Button>\n      </Form> */}\n\n      <hr />\n      {loading ? (\n        <>\n          <Spinner animation=\"border\" role=\"status\">\n            <span className=\"visually-hidden\">Loading...</span>\n          </Spinner>\n        </>\n      ) : (\n        <> </>\n      )}\n\n      <Table striped bordered hover variant=\"dark\" responsive>\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>ID</th>\n            <th>File Name</th>\n            <th>Transaction</th>\n            <th>Payment Status</th>\n            <th>Payment Transaction</th>\n            <th>Download</th>\n          </tr>\n        </thead>\n        <tbody>\n          {result.map((product, index) => (\n            <tr key={product._id}>\n              <td>{index}</td>\n              <td>{product._id}</td>\n              <td>{product.fileName}</td>\n              <td>\n                <a\n                  rel=\"noopener noreferrer\"\n                  target=\"_blank\"\n                  href={`https://testnet.bscscan.com/tx/${product.transaction}`}\n                >\n                  Transaction\n                </a>\n              </td>\n              <td>{product.paymentDone ? \"completed\" : \"pending\"}</td>\n              <td>\n                {\" \"}\n                <a\n                  rel=\"noopener noreferrer\"\n                  target=\"_blank\"\n                  href={`https://testnet.bscscan.com/tx/${product.paymentTransaction}`}\n                >\n                  {product.paymentDone\n                    ? \"Payment transaction\"\n                    : \"No payment trasaction found\"}\n                </a>\n              </td>\n              <td>\n                {product.paymentDone ? (\n                  <>\n                    {\" \"}\n                    <button\n                      type=\"button\"\n                      onClick={async (e) => {\n                        e.preventDefault();\n                        onClickDownload(product._id);\n                      }}\n                    >\n                      <i className=\"bi bi-download\">\n                        <svg\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          width=\"16\"\n                          height=\"16\"\n                          fill=\"currentColor\"\n                          className=\"bi bi-download\"\n                          viewBox=\"0 0 16 16\"\n                        >\n                          <path d=\"M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5z\" />\n                          <path d=\"M7.646 11.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V1.5a.5.5 0 0 0-1 0v8.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3z\" />\n                        </svg>\n                      </i>\n                    </button>\n                  </>\n                ) : (\n                  <>\n                    <button\n                      type=\"button\"\n                      onClick={async (e) => {\n                        e.preventDefault();\n                        onClickPay(product._id);\n                      }}\n                    >\n                      Complete Payment\n                    </button>\n                  </>\n                )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n      <ToastContainer />\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import Web3 from \"web3\";\nimport Fortmatic from \"fortmatic\";\n\nlet web3;\n\nif (typeof window !== \"undefined\" && typeof window.web3 !== \"undefined\") {\n  web3 = new Web3(window.web3.currentProvider);\n} else {\n  const provider = new Web3.providers.HttpProvider(\n    \"https://data-seed-prebsc-1-s1.binance.org:8545\"\n  );\n  web3 = new Web3(provider);\n}\n\n// const BSCOptions = {\n//     /* Smart Chain mainnet RPC URL */\n//     rpcUrl: 'https://bsc-dataseed.binance.org/',\n//     chainId: 56 // Smart Chain mainnet chain id\n//   }\n\n//   // Setting network to Smart Chain\n//   const fm = new Fortmatic('YOUR_LIVE_API_KEY', BSCOptions);\n//   window.web3 = new Web3(fm.getProvider());\n\nexport default web3;\n","import web3 from \"./web3\";\nimport verifyJson from \"./build/Verify.json\";\nconst verify = new web3.eth.Contract(\n  JSON.parse(verifyJson.interface),\n  \"0x6eFb39fD4e3126F517Da8b578a07053fffaDf839\"\n);\n\nexport default verify;\n"],"sourceRoot":""}